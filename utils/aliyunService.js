// utils/aliyunService.js - ÈòøÈáå‰∫ë‰∫ëÂ≠òÂÇ®ÊúçÂä°Ê®°Âùó
// Âü∫‰∫éÈòøÈáå‰∫ëÊúçÂä°Âô®ÂíåÂüüÂêçÁöÑÂÆåÊï¥‰∫ëÂ≠òÂÇ®Ëß£ÂÜ≥ÊñπÊ°à

class AliyunService {
  constructor() {
    // ÈòøÈáå‰∫ëÊúçÂä°ÈÖçÁΩÆ
    this.config = {
      // ÊúçÂä°Âô®ÈÖçÁΩÆ - ‰ªéÊú¨Âú∞Â≠òÂÇ®Âä†ËΩΩÊàñ‰ΩøÁî®ÈªòËÆ§ÂÄº
      serverUrl: this.loadServerUrl(),
      apiVersion: 'v1',
      timeout: 10000
    }
    
    // ÂêåÊ≠•Áä∂ÊÄÅ
    this.syncStatus = {
      isSyncing: false,
      lastSyncTime: null,
      pendingCount: 0,
      isOnline: false
    }
    
    // ÁºìÂ≠òÈÖçÁΩÆ
    this.cache = {
      maxSize: 50, // ÊúÄÂ§ßÁºìÂ≠òÁ¨îËÆ∞Êï∞
      ttl: 24 * 60 * 60 * 1000 // 24Â∞èÊó∂ËøáÊúü
    }
    
    this.init()
  }

  /**
   * ÂàùÂßãÂåñÊúçÂä°
   */
  init() {
    // Ê£ÄÊü•ÁΩëÁªúÁä∂ÊÄÅ
    this.checkNetworkStatus()
    
    // ËÆæÁΩÆÂÆöÊó∂ÂêåÊ≠•
    this.setupAutoSync()
    
    console.log('‚úÖ ÈòøÈáå‰∫ëÊúçÂä°ÂàùÂßãÂåñÂÆåÊàê')
    console.log('üîó ÊúçÂä°Âô®Âú∞ÂùÄ:', this.config.serverUrl)
  }

  /**
   * Âä†ËΩΩÊúçÂä°Âô®URLÈÖçÁΩÆ
   */
  loadServerUrl() {
    try {
      const savedUrl = wx.getStorageSync('serverUrl')
      if (savedUrl && savedUrl.trim()) {
        return savedUrl.trim()
      }
    } catch (error) {
      console.warn('ËØªÂèñÊúçÂä°Âô®URLÈÖçÁΩÆÂ§±Ë¥•:', error)
    }
    
    // ËøîÂõûÈªòËÆ§ÂÄº
    return 'https://your-domain.com' // ÈúÄË¶ÅÊõøÊç¢‰∏∫‰Ω†ÁöÑÂÆûÈôÖÂüüÂêç
  }

  /**
   * Ê£ÄÊü•ÁΩëÁªúÁä∂ÊÄÅ
   */
  async checkNetworkStatus() {
    try {
      const networkInfo = await this.getNetworkType()
      this.syncStatus.isOnline = networkInfo.networkType !== 'none'
      console.log('üì± ÁΩëÁªúÁä∂ÊÄÅ:', networkInfo.networkType, this.syncStatus.isOnline ? 'Âú®Á∫ø' : 'Á¶ªÁ∫ø')
    } catch (error) {
      console.error('ÁΩëÁªúÁä∂ÊÄÅÊ£ÄÊü•Â§±Ë¥•:', error)
      this.syncStatus.isOnline = false
    }
  }

  /**
   * Ëé∑ÂèñÁΩëÁªúÁ±ªÂûã
   */
  getNetworkType() {
    return new Promise((resolve, reject) => {
      wx.getNetworkType({
        success: (res) => resolve(res),
        fail: (error) => reject(error)
      })
    })
  }

  /**
   * ËÆæÁΩÆËá™Âä®ÂêåÊ≠•
   */
  setupAutoSync() {
    // ÊØè5ÂàÜÈíüÊ£ÄÊü•‰∏ÄÊ¨°ÂêåÊ≠•Áä∂ÊÄÅ
    setInterval(() => {
      this.checkSyncStatus()
    }, 5 * 60 * 1000)
    
    // Â∫îÁî®ÂêØÂä®Êó∂ÂêåÊ≠•
    wx.onAppShow(() => {
      setTimeout(() => {
        this.autoSync()
      }, 2000)
    })
  }

  /**
   * Ê£ÄÊü•ÂêåÊ≠•Áä∂ÊÄÅ
   */
  checkSyncStatus() {
    if (!this.syncStatus.isOnline || this.syncStatus.isSyncing) {
      return
    }

    // Ê£ÄÊü•ÊòØÂê¶ÊúâÂæÖÂêåÊ≠•ÁöÑÊï∞ÊçÆ
    const localNotes = wx.getStorageSync('notes') || []
    const pendingNotes = localNotes.filter(note => 
      note.isModified || !note.lastSyncTime || (note.lastSyncTime && 
      new Date() - new Date(note.lastSyncTime) > this.cache.ttl)
    )

    if (pendingNotes.length > 0) {
      console.log(`üîÑ ÂèëÁé∞ ${pendingNotes.length} Êù°ÂæÖÂêåÊ≠•Á¨îËÆ∞`)
      this.autoSync()
    }
  }

  /**
   * Ëá™Âä®ÂêåÊ≠•
   */
  async autoSync() {
    if (!this.syncStatus.isOnline) {
      console.log('üì± Á¶ªÁ∫øÁä∂ÊÄÅÔºåË∑≥ËøáËá™Âä®ÂêåÊ≠•')
      return
    }

    try {
      // ÂÖà‰ªé‰∫ëÁ´ØÊãâÂèñÊúÄÊñ∞Êï∞ÊçÆ
      await this.syncFromServer()
      
      // ÂÜçÊé®ÈÄÅÊú¨Âú∞‰øÆÊîπ
      await this.syncToServer()
    } catch (error) {
      console.error('Ëá™Âä®ÂêåÊ≠•Â§±Ë¥•:', error)
    }
  }

  /**
   * ‰∏ä‰º†Á¨îËÆ∞Âà∞ÊúçÂä°Âô®
   */
  async uploadNote(note) {
    try {
      const requestData = {
        method: 'POST',
        url: `${this.config.serverUrl}/api/${this.config.apiVersion}/notes`,
        data: {
          ...note,
          userId: this.getCurrentUserId(),
          timestamp: Date.now(),
          deviceInfo: await this.getDeviceInfo()
        },
        header: {
          'Content-Type': 'application/json',
          'Authorization': this.getAuthToken()
        },
        timeout: this.config.timeout
      }

      const result = await this.request(requestData)
      
      if (result.success) {
        console.log('‚úÖ Á¨îËÆ∞‰∏ä‰º†ÊàêÂäü:', result.data.noteId)
        return {
          success: true,
          serverId: result.data.noteId,
          note: result.data.note
        }
      } else {
        throw new Error(result.message || '‰∏ä‰º†Â§±Ë¥•')
      }
    } catch (error) {
      console.error('‚ùå Á¨îËÆ∞‰∏ä‰º†Â§±Ë¥•:', error)
      return { success: false, error: error.message }
    }
  }

  /**
   * ÊâπÈáè‰∏ä‰º†Á¨îËÆ∞
   */
  async uploadNotes(notes) {
    if (!this.syncStatus.isOnline) {
      return { success: false, error: 'ÁΩëÁªúÊú™ËøûÊé•' }
    }

    this.syncStatus.isSyncing = true
    this.syncStatus.pendingCount = notes.length

    try {
      wx.showLoading({ title: `Ê≠£Âú®‰∏ä‰º† ${notes.length} Êù°Á¨îËÆ∞...` })

      const uploadPromises = notes.map(note => this.uploadNote(note))
      const results = await Promise.allSettled(uploadPromises)
      
      const successCount = results.filter(r => r.status === 'fulfilled' && r.value.success).length
      const failCount = results.length - successCount

      // Êõ¥Êñ∞Êú¨Âú∞Á¨îËÆ∞ÁöÑÂêåÊ≠•Áä∂ÊÄÅ
      const localNotes = wx.getStorageSync('notes') || []
      const updatedNotes = localNotes.map(localNote => {
        const result = results.find(r => 
          r.status === 'fulfilled' && 
          r.value.success && 
          r.value.note && 
          r.value.note.id === localNote.id
        )
        
        if (result) {
          return {
            ...localNote,
            serverId: result.value.serverId,
            isModified: false,
            lastSyncTime: new Date().toISOString()
          }
        }
        return localNote
      })

      wx.setStorageSync('notes', updatedNotes)

      wx.hideLoading()
      this.syncStatus.isSyncing = false
      this.syncStatus.pendingCount = 0
      this.syncStatus.lastSyncTime = new Date().toISOString()

      console.log(`üì§ ÊâπÈáè‰∏ä‰º†ÂÆåÊàê: ÊàêÂäü ${successCount} Êù°ÔºåÂ§±Ë¥• ${failCount} Êù°`)
      
      return {
        success: true,
        totalCount: results.length,
        successCount,
        failCount
      }
    } catch (error) {
      wx.hideLoading()
      this.syncStatus.isSyncing = false
      this.syncStatus.pendingCount = 0
      console.error('‚ùå ÊâπÈáè‰∏ä‰º†Â§±Ë¥•:', error)
      return { success: false, error: error.message }
    }
  }

  /**
   * ‰ªéÊúçÂä°Âô®‰∏ãËΩΩÁ¨îËÆ∞
   */
  async downloadNotes(userId = null) {
    if (!this.syncStatus.isOnline) {
      return { success: false, error: 'ÁΩëÁªúÊú™ËøûÊé•' }
    }

    try {
      const requestData = {
        method: 'GET',
        url: `${this.config.serverUrl}/api/${this.config.apiVersion}/notes`,
        data: {
          userId: userId || this.getCurrentUserId(),
          lastSyncTime: this.syncStatus.lastSyncTime
        },
        header: {
          'Authorization': this.getAuthToken()
        },
        timeout: this.config.timeout
      }

      const result = await this.request(requestData)
      
      if (result.success) {
        console.log(`üì• ‰∏ãËΩΩÁ¨îËÆ∞ÊàêÂäü: ${result.data.notes.length} Êù°`)
        return {
          success: true,
          notes: result.data.notes,
          count: result.data.notes.length,
          lastSyncTime: result.data.lastSyncTime
        }
      } else {
        throw new Error(result.message || '‰∏ãËΩΩÂ§±Ë¥•')
      }
    } catch (error) {
      console.error('‚ùå ‰∏ãËΩΩÁ¨îËÆ∞Â§±Ë¥•:', error)
      return { success: false, error: error.message }
    }
  }

  /**
   * Êõ¥Êñ∞ÊúçÂä°Âô®‰∏äÁöÑÁ¨îËÆ∞
   */
  async updateNote(serverId, noteData) {
    try {
      const requestData = {
        method: 'PUT',
        url: `${this.config.serverUrl}/api/${this.config.apiVersion}/notes/${serverId}`,
        data: {
          ...noteData,
          timestamp: Date.now()
        },
        header: {
          'Content-Type': 'application/json',
          'Authorization': this.getAuthToken()
        },
        timeout: this.config.timeout
      }

      const result = await this.request(requestData)
      
      if (result.success) {
        console.log('‚úÖ Á¨îËÆ∞Êõ¥Êñ∞ÊàêÂäü:', serverId)
        return {
          success: true,
          serverId: serverId,
          note: result.data.note
        }
      } else {
        throw new Error(result.message || 'Êõ¥Êñ∞Â§±Ë¥•')
      }
    } catch (error) {
      console.error('‚ùå Á¨îËÆ∞Êõ¥Êñ∞Â§±Ë¥•:', error)
      return { success: false, error: error.message }
    }
  }

  /**
   * Âà†Èô§ÊúçÂä°Âô®‰∏äÁöÑÁ¨îËÆ∞
   */
  async deleteNote(serverId) {
    try {
      const requestData = {
        method: 'DELETE',
        url: `${this.config.serverUrl}/api/${this.config.apiVersion}/notes/${serverId}`,
        header: {
          'Authorization': this.getAuthToken()
        },
        timeout: this.config.timeout
      }

      const result = await this.request(requestData)
      
      if (result.success) {
        console.log('‚úÖ Á¨îËÆ∞Âà†Èô§ÊàêÂäü:', serverId)
        return { success: true, serverId: serverId }
      } else {
        throw new Error(result.message || 'Âà†Èô§Â§±Ë¥•')
      }
    } catch (error) {
      console.error('‚ùå Á¨îËÆ∞Âà†Èô§Â§±Ë¥•:', error)
      return { success: false, error: error.message }
    }
  }

  /**
   * ‰∏ä‰º†Êñá‰ª∂Âà∞ÊúçÂä°Âô®
   */
  async uploadFile(filePath, fileName = null) {
    try {
      // ÂÖà‰∏ä‰º†Âà∞ÂæÆ‰ø°‰∏¥Êó∂Êñá‰ª∂
      const uploadResult = await new Promise((resolve, reject) => {
        wx.uploadFile({
          url: `${this.config.serverUrl}/api/${this.config.apiVersion}/files`,
          filePath: filePath,
          name: 'file',
          header: {
            'Authorization': this.getAuthToken()
          },
          formData: {
            fileName: fileName || `file_${Date.now()}`,
            userId: this.getCurrentUserId()
          },
          success: resolve,
          fail: reject
        })
      })

      if (uploadResult.statusCode === 200) {
        const result = JSON.parse(uploadResult.data)
        console.log('‚úÖ Êñá‰ª∂‰∏ä‰º†ÊàêÂäü:', result.fileId)
        return {
          success: true,
          fileId: result.fileId,
          fileUrl: result.fileUrl,
          fileName: result.fileName
        }
      } else {
        throw new Error('‰∏ä‰º†Â§±Ë¥•')
      }
    } catch (error) {
      console.error('‚ùå Êñá‰ª∂‰∏ä‰º†Â§±Ë¥•:', error)
      return { success: false, error: error.message }
    }
  }

  /**
   * ‰ªéÊúçÂä°Âô®‰∏ãËΩΩÊñá‰ª∂
   */
  async downloadFile(fileId, fileName) {
    try {
      const downloadResult = await new Promise((resolve, reject) => {
        wx.downloadFile({
          url: `${this.config.serverUrl}/api/${this.config.apiVersion}/files/${fileId}`,
          header: {
            'Authorization': this.getAuthToken()
          },
          success: resolve,
          fail: reject
        })
      })

      if (downloadResult.statusCode === 200) {
        console.log('‚úÖ Êñá‰ª∂‰∏ãËΩΩÊàêÂäü:', fileId)
        return {
          success: true,
          tempFilePath: downloadResult.tempFilePath,
          fileId: fileId
        }
      } else {
        throw new Error('‰∏ãËΩΩÂ§±Ë¥•')
      }
    } catch (error) {
      console.error('‚ùå Êñá‰ª∂‰∏ãËΩΩÂ§±Ë¥•:', error)
      return { success: false, error: error.message }
    }
  }

  /**
   * ÂêåÊ≠•Êú¨Âú∞Êï∞ÊçÆÂà∞ÊúçÂä°Âô®
   */
  async syncToServer() {
    if (!this.syncStatus.isOnline) {
      return { success: false, error: 'ÁΩëÁªúÊú™ËøûÊé•' }
    }

    if (this.syncStatus.isSyncing) {
      return { success: false, error: 'ÂêåÊ≠•Ê≠£Âú®ËøõË°å‰∏≠' }
    }

    this.syncStatus.isSyncing = true

    try {
      // Ëé∑ÂèñÈúÄË¶ÅÂêåÊ≠•ÁöÑÁ¨îËÆ∞
      const localNotes = wx.getStorageSync('notes') || []
      const notesToSync = localNotes.filter(note => 
        note.isModified || !note.lastSyncTime || 
        (note.lastSyncTime && new Date() - new Date(note.lastSyncTime) > this.cache.ttl)
      )

      if (notesToSync.length === 0) {
        this.syncStatus.isSyncing = false
        return { success: true, message: 'ÊâÄÊúâÊï∞ÊçÆÂ∑≤ÊòØÊúÄÊñ∞' }
      }

      console.log(`üì§ ÂáÜÂ§áÂêåÊ≠• ${notesToSync.length} Êù°Á¨îËÆ∞Âà∞ÊúçÂä°Âô®`)
      return await this.uploadNotes(notesToSync)
    } catch (error) {
      this.syncStatus.isSyncing = false
      console.error('‚ùå ÂêåÊ≠•Âà∞ÊúçÂä°Âô®Â§±Ë¥•:', error)
      return { success: false, error: error.message }
    }
  }

  /**
   * ‰ªéÊúçÂä°Âô®ÂêåÊ≠•Âà∞Êú¨Âú∞
   */
  async syncFromServer() {
    if (!this.syncStatus.isOnline) {
      return { success: false, error: 'ÁΩëÁªúÊú™ËøûÊé•' }
    }

    if (this.syncStatus.isSyncing) {
      return { success: false, error: 'ÂêåÊ≠•Ê≠£Âú®ËøõË°å‰∏≠' }
    }

    this.syncStatus.isSyncing = true

    try {
      wx.showLoading({ title: 'Ê≠£Âú®‰ªéÊúçÂä°Âô®ÂêåÊ≠•...' })

      // ‰∏ãËΩΩÊúçÂä°Âô®Á¨îËÆ∞
      const downloadResult = await this.downloadNotes()

      if (!downloadResult.success) {
        throw new Error(downloadResult.error)
      }

      // Ëé∑ÂèñÊú¨Âú∞Á¨îËÆ∞
      const localNotes = wx.getStorageSync('notes') || []
      const localNotesMap = new Map(localNotes.map(note => [note.id, note]))

      // ÂêàÂπ∂Êï∞ÊçÆ
      const mergedNotes = []
      const serverNotesMap = new Map(downloadResult.notes.map(note => [note.id, note]))

      // Â§ÑÁêÜÊúçÂä°Âô®Á¨îËÆ∞
      downloadResult.notes.forEach(serverNote => {
        const localNote = localNotesMap.get(serverNote.id)
        
        if (!localNote) {
          // ÊúçÂä°Âô®Êúâ‰ΩÜÊú¨Âú∞Ê≤°ÊúâÔºåÁõ¥Êé•Ê∑ªÂä†
          mergedNotes.push({
            ...serverNote,
            serverId: serverNote.serverId || serverNote.id,
            isFromServer: true,
            lastSyncTime: new Date().toISOString()
          })
        } else {
          // ÈÉΩÂ≠òÂú®ÔºåÊØîËæÉÊó∂Èó¥Êà≥
          const serverTime = new Date(serverNote.updateTime || serverNote.createTime)
          const localTime = new Date(localNote.updateTime || localNote.createTime)
          
          if (serverTime > localTime && !localNote.isModified) {
            // ÊúçÂä°Âô®Êõ¥Êñ∞Ôºå‰ΩøÁî®ÊúçÂä°Âô®ÁâàÊú¨
            mergedNotes.push({
              ...serverNote,
              serverId: serverNote.serverId || serverNote.id,
              isFromServer: true,
              lastSyncTime: new Date().toISOString()
            })
          } else {
            // Êú¨Âú∞Êõ¥Êñ∞Ôºå‰ΩøÁî®Êú¨Âú∞ÁâàÊú¨
            mergedNotes.push({
              ...localNote,
              needsUpload: true
            })
          }
        }
      })

      // Â§ÑÁêÜ‰ªÖÊú¨Âú∞Â≠òÂú®ÁöÑÁ¨îËÆ∞
      localNotes.forEach(localNote => {
        if (!serverNotesMap.has(localNote.id)) {
          mergedNotes.push({
            ...localNote,
            needsUpload: true
          })
        }
      })

      // ‰øùÂ≠òÂêàÂπ∂ÂêéÁöÑÊï∞ÊçÆ
      wx.setStorageSync('notes', mergedNotes)

      wx.hideLoading()
      this.syncStatus.isSyncing = false
      this.syncStatus.lastSyncTime = downloadResult.lastSyncTime || new Date().toISOString()

      console.log(`‚úÖ ÊúçÂä°Âô®ÂêåÊ≠•ÂÆåÊàêÔºåÂÖ± ${mergedNotes.length} Êù°Á¨îËÆ∞`)
      return {
        success: true,
        message: `ÂêåÊ≠•ÂÆåÊàêÔºåÂÖ± ${mergedNotes.length} Êù°Á¨îËÆ∞`,
        noteCount: mergedNotes.length,
        newNotes: mergedNotes.filter(note => note.isFromServer).length,
        updatedNotes: mergedNotes.filter(note => note.needsUpload).length
      }
    } catch (error) {
      wx.hideLoading()
      this.syncStatus.isSyncing = false
      console.error('‚ùå ÊúçÂä°Âô®ÂêåÊ≠•Â§±Ë¥•:', error)
      return { success: false, error: error.message }
    }
  }

  /**
   * ÂÆåÊï¥ÂêåÊ≠•ÔºàÂèåÂêëÔºâ
   */
  async fullSync() {
    console.log('üîÑ ÊâßË°åÂÆåÊï¥ÂêåÊ≠•')
    
    // ÂÖà‰ªéÊúçÂä°Âô®ÊãâÂèñ
    const fromServer = await this.syncFromServer()
    if (!fromServer.success) {
      return fromServer
    }
    
    // ÂÜçÊé®ÈÄÅÂà∞ÊúçÂä°Âô®
    return await this.syncToServer()
  }

  /**
   * ÁΩëÁªúËØ∑Ê±ÇÂ∞ÅË£Ö
   */
  request(options) {
    return new Promise((resolve, reject) => {
      wx.request({
        ...options,
        success: (res) => {
          if (res.statusCode === 200) {
            resolve(res.data)
          } else {
            reject(new Error(`ËØ∑Ê±ÇÂ§±Ë¥•: ${res.statusCode}`))
          }
        },
        fail: (error) => {
          reject(error)
        }
      })
    })
  }

  /**
   * Ëé∑ÂèñÂΩìÂâçÁî®Êà∑ID
   */
  getCurrentUserId() {
    try {
      const userInfo = wx.getStorageSync('userInfo')
      return userInfo ? userInfo.username : 'anonymous'
    } catch (error) {
      return 'anonymous'
    }
  }

  /**
   * Ëé∑ÂèñËÆ§ËØÅ‰ª§Áâå
   */
  getAuthToken() {
    try {
      const userInfo = wx.getStorageSync('userInfo')
      return userInfo ? `Bearer ${userInfo.token || userInfo.username}` : ''
    } catch (error) {
      return ''
    }
  }

  /**
   * Ëé∑ÂèñËÆæÂ§á‰ø°ÊÅØ
   */
  getDeviceInfo() {
    return new Promise((resolve) => {
      wx.getSystemInfo({
        success: (res) => {
          resolve({
            platform: res.platform,
            system: res.system,
            version: res.version,
            model: res.model,
            screenWidth: res.screenWidth,
            screenHeight: res.screenHeight
          })
        },
        fail: () => {
          resolve({})
        }
      })
    })
  }

  /**
   * Ëé∑ÂèñÂêåÊ≠•Áä∂ÊÄÅ
   */
  getSyncStatus() {
    return {
      ...this.syncStatus,
      isServerAvailable: this.syncStatus.isOnline,
      serverUrl: this.config.serverUrl
    }
  }

  /**
   * ËÆæÁΩÆÊúçÂä°Âô®URL
   */
  setServerUrl(url) {
    this.config.serverUrl = url
    console.log('‚úÖ ÊúçÂä°Âô®URLËÆæÁΩÆÊàêÂäü:', url)
  }

  /**
   * ÊµãËØïÊúçÂä°Âô®ËøûÊé•
   */
  async testConnection() {
    try {
      const requestData = {
        method: 'GET',
        url: `${this.config.serverUrl}/api/${this.config.apiVersion}/health`,
        timeout: 10000,
        header: {
          'Content-Type': 'application/json'
        }
      }

      console.log('üîç ÊµãËØïÊúçÂä°Âô®ËøûÊé•:', requestData.url)
      
      const result = await this.requestWithDetails(requestData)
      
      console.log('üì° ÊúçÂä°Âô®ÂìçÂ∫î:', result)
      
      if (result.success && result.data && result.data.success) {
        console.log('‚úÖ ÊúçÂä°Âô®ËøûÊé•ÊµãËØïÊàêÂäü')
        return { 
          success: true, 
          message: 'ÊúçÂä°Âô®ËøûÊé•Ê≠£Â∏∏',
          serverInfo: result.data
        }
      } else {
        const errorMsg = result.data ? result.data.message : 'ÊúçÂä°Âô®ÂìçÂ∫îÂºÇÂ∏∏'
        throw new Error(errorMsg)
      }
    } catch (error) {
      console.error('‚ùå ÊúçÂä°Âô®ËøûÊé•ÊµãËØïÂ§±Ë¥•:', error)
      return { 
        success: false, 
        error: error.message,
        serverUrl: this.config.serverUrl
      }
    }
  }

  /**
   * Â∏¶ËØ¶ÁªÜ‰ø°ÊÅØÁöÑÁΩëÁªúËØ∑Ê±Ç
   */
  requestWithDetails(options) {
    return new Promise((resolve, reject) => {
      wx.request({
        ...options,
        success: (res) => {
          console.log('üì° ËØ∑Ê±ÇÊàêÂäü:', {
            statusCode: res.statusCode,
            data: res.data,
            header: res.header
          })
          
          if (res.statusCode === 200) {
            resolve({
              success: true,
              statusCode: res.statusCode,
              data: res.data,
              header: res.header
            })
          } else {
            resolve({
              success: false,
              statusCode: res.statusCode,
              data: res.data,
              error: `HTTP ${res.statusCode}`
            })
          }
        },
        fail: (error) => {
          console.error('üì° ËØ∑Ê±ÇÂ§±Ë¥•:', error)
          reject(new Error(`ÁΩëÁªúËØ∑Ê±ÇÂ§±Ë¥•: ${error.errMsg || error.message}`))
        }
      })
    })
  }
}

// ÂàõÂª∫Âçï‰æãÂÆû‰æã
const aliyunService = new AliyunService()

module.exports = aliyunService
